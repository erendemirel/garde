// Package endpoint_documentation Code generated by swaggo/swag. DO NOT EDIT
package endpoint_documentation

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates a user and returns a session token. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public Routes"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns session ID and sets session cookie",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed, invalid credentials, MFA required, or invalid MFA code",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many login attempts",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invalidates the current session. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected Routes"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Session invalidated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "No active session",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sessions/revoke": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Revokes all active sessions for a user. Requires permissions.json and groups.json files to be present for permission checks (except for superuser).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected and Admin-Only Routes"
                ],
                "summary": "Revoke user sessions",
                "parameters": [
                    {
                        "description": "Session revocation request with user ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RevokeSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sessions revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or permissions system not loaded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns users with their details and pending requests. Admins see users in their groups, superusers see all. Requires permissions.json and groups.json files to be present for permission checks (except for superuser).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected and Admin-Only Routes"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.ListUsersResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or permissions system not loaded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user account with pending approval status. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public Routes"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns created user ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.CreateUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format, email format, password requirements not met, or email already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "User creation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns the authenticated user's information. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected Routes"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "Current user information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid session",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/mfa/disable": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Disables Multi-Factor Authentication for the authenticated user if not enforced. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected Routes"
                ],
                "summary": "Disable MFA",
                "parameters": [
                    {
                        "description": "MFA verification code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DisableMFARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MFA disabled successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid MFA code or invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or MFA enforced by policy",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/mfa/setup": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Sets up Multi-Factor Authentication for a user. No mTLS required for this endpoint. Uses ConditionalAuthMiddleware to allow both authenticated and unauthenticated access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conditional Routes (Public or Protected)"
                ],
                "summary": "Setup MFA",
                "responses": {
                    "200": {
                        "description": "Returns MFA secret and QR code URL",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.MFAResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "MFA already enabled or setup failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized when using authenticated mode",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/mfa/verify": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verifies MFA code and enables MFA for the user. No mTLS required for this endpoint. Uses ConditionalAuthMiddleware to allow both authenticated and unauthenticated access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conditional Routes (Public or Protected)"
                ],
                "summary": "Verify and enable MFA",
                "parameters": [
                    {
                        "description": "MFA verification code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MFAVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MFA enabled successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid MFA code, invalid request format, or MFA already enabled",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized when using authenticated mode",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/password/change": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Changes the user's password. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected Routes"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Change password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format, old password incorrect, or password requirements not met",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid session",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "MFA required or invalid MFA code",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/password/otp": {
            "post": {
                "description": "Sends a one-time password to user's primary email. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public Routes"
                ],
                "summary": "Request OTP for password reset",
                "parameters": [
                    {
                        "description": "Request OTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully (or no-op if email doesn't exist)",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid email format or request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/password/reset": {
            "post": {
                "description": "Resets the user's password using OTP, and optionally MFA. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public Routes"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Password reset request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful but pending admin approval",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format, invalid OTP, invalid MFA code, or password requirements not met",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Unauthorized, too many unsuccessful attempts",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/request-update-from-admin": {
            "post": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "User requests changes from an admin to their permissions or groups. No mTLS required for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected Routes"
                ],
                "summary": "Request update for user information",
                "parameters": [
                    {
                        "description": "Update request details (permissions/groups)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update request submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRequestResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or empty update request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid session",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Update request already pending",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Operation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns details for a specific user. Admins can only access users in their groups. Superuser can access all users. Requires permissions.json and groups.json files to be present for permission checks (except for superuser).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected and Admin-Only Routes"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or permissions system not loaded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update user details or process pending update requests. Requires admin privileges. Requires permissions.json and groups.json files to be present for permission checks (except for superuser).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected and Admin-Only Routes"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target User ID to update",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update details including approve/reject flags for pending requests",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User update in progress or concurrent update detected",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or permissions system not loaded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/validate": {
            "get": {
                "security": [
                    {
                        "SessionCookie": []
                    },
                    {
                        "ApiKey": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "description": "Validates a session token. Require API key + mTLS. No other type of authentication is supported",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "For Internal Services"
                ],
                "summary": "Validate a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID (required only for API requests with API key)",
                        "name": "session_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session validation result with user ID and expiry",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.SessionValidationResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid session ID format or missing session ID for API request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid session, missing mTLS certificate for API requests, or invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions (user not in admin's groups)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or permissions system not loaded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "mfa_code": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "old_password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.CreateUserResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.DisableMFARequest": {
            "type": "object",
            "required": [
                "mfa_code"
            ],
            "properties": {
                "mfa_code": {
                    "type": "string"
                }
            }
        },
        "models.ErrorDetails": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.ErrorDetails"
                }
            }
        },
        "models.ListUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserResponse"
                    }
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "mfa_code": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "session_id": {
                    "type": "string"
                }
            }
        },
        "models.MFAResponse": {
            "type": "object",
            "properties": {
                "qr_code_url": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "models.MFAVerifyRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "description": "Required only for unauthenticated requests",
                    "type": "string"
                }
            }
        },
        "models.PasswordResetRequest": {
            "type": "object",
            "required": [
                "email",
                "new_password",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "mfa_code": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "models.RequestOTPRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.RequestUpdateFields": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            }
        },
        "models.RequestUpdateRequest": {
            "type": "object",
            "required": [
                "updates"
            ],
            "properties": {
                "updates": {
                    "$ref": "#/definitions/models.RequestUpdateFields"
                }
            }
        },
        "models.RevokeSessionRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "mfa_code": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.SessionValidationResponse": {
            "type": "object",
            "properties": {
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {}
            }
        },
        "models.UpdateRequestResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "approve_update": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "mfa_enforced": {
                    "type": "boolean"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "reject_update": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/models.UserStatus"
                }
            }
        },
        "models.UserGroups": {
            "type": "object",
            "additionalProperties": {
                "type": "boolean"
            }
        },
        "models.UserPermissions": {
            "type": "object",
            "additionalProperties": {
                "type": "boolean"
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "groups": {
                    "$ref": "#/definitions/models.UserGroups"
                },
                "id": {
                    "type": "string"
                },
                "last_login": {
                    "type": "string"
                },
                "mfa_enabled": {
                    "type": "boolean"
                },
                "mfa_enforced": {
                    "type": "boolean"
                },
                "pending_updates": {
                    "$ref": "#/definitions/models.UserUpdateRequest"
                },
                "permissions": {
                    "$ref": "#/definitions/models.UserPermissions"
                },
                "status": {
                    "$ref": "#/definitions/models.UserStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.UserStatus": {
            "type": "string",
            "enum": [
                "ok",
                "locked by admin",
                "locked by security",
                "pending admin approval",
                "admin approval rejected"
            ],
            "x-enum-varnames": [
                "UserStatusOk",
                "UserStatusLockedByAdmin",
                "UserStatusLockedBySecurity",
                "UserStatusPendingApproval",
                "UserStatusApprovalRejected"
            ]
        },
        "models.UserUpdateFields": {
            "type": "object",
            "properties": {
                "groups": {
                    "$ref": "#/definitions/models.UserGroups"
                },
                "permissions": {
                    "$ref": "#/definitions/models.UserPermissions"
                }
            }
        },
        "models.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "fields": {
                    "$ref": "#/definitions/models.UserUpdateFields"
                },
                "requested_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKey": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "SessionCookie": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "garde",
	Description:      "Lightweight and secure authentication service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
